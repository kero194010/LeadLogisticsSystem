@model LLII_Systems.Models.Item

@{
    ViewBag.Title = "New Item";
}

<style>
    /* Styles for form containers, labels, and controls */
    .form-container {
        border: 1px solid #ddd;
        padding: 20px;
        border-radius: 5px;
        background-color: #fff;
    }

    .form-label {
        font-weight: bold;
        text-transform: uppercase;

    }

    .form-control {
        width: 100%;
        padding: 6px;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-top: 5px;

    }

    .text-input {
        text-align:right;
    }

    .text-danger {
        color: #dc3545;
    }

    .btn-primary {
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
    }



    /* Center align the previous and next buttons */
    .button-container {
        text-align: center;
        margin-top: 20px;
        align-content: center;
    }

    #saveButton {
        display: none;
    }

    #prevButton {
        display: none;
    }
</style>
<div class="container d-lg-block d-md-block">
    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" id="single-item-tab" data-bs-toggle="pill" href="#single-item" role="tab" aria-controls="single-item" aria-selected="true">Single Item</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="multiple-items-tab" data-bs-toggle="pill" href="#multiple-items" role="tab" aria-controls="multiple-items" aria-selected="false">Multiple Items</a>
        </li>
    </ul>

    <div class="tab-content" id="pills-tabContent">
        <div class="tab-pane fade show active" id="single-item" role="tabpanel" aria-labelledby="single-item-tab">
            @using (Html.BeginForm("InsertItem", "item", FormMethod.Post, new { autocomplete = "off" }))
            {
                <div class="py-1">
                    <div class="row justify-content-center">
                        <div class="col-lg-12">
                            @Html.AntiForgeryToken()
                            <div class="form-container" style="height:100%">
                                <h4 class="text-center mb-4">Item Record</h4>
                                <h4>Item Information</h4>
                                <hr />
                                <div class="mb-3">
                                    <div class="form-group row">
                                        <div class="col">
                                            @Html.LabelFor(model => model.mother_code, "Mother Code", new { @class = "form-label" })
                                            @Html.EditorFor(model => model.mother_code, new { htmlAttributes = new { @class = "form-control text-input", minlength = "4" } })
                                            @Html.ValidationMessageFor(model => model.mother_code, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col">
                                            @Html.LabelFor(model => model.item_code, "Item Code", new { @class = "form-label" })
                                            @Html.EditorFor(model => model.item_code, new { htmlAttributes = new { @class = "form-control text-input", minlength = "4" } })
                                            @Html.ValidationMessageFor(model => model.item_code, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col">
                                            @Html.LabelFor(model => model.item_source, "Source", new { @class = "form-label" })
                                            @Html.DropDownListFor(m => m.item_source, new SelectList(new[]
                                                {
                                                    new SelectListItem { Text = "Local", Value = "local" },
                                                    new SelectListItem { Text = "Import", Value = "import" }
                                                }, "Value", "Text"), "Select a source", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.item_source, "", new { @class = "text-danger" })

                                        </div>

                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-group row">
                                        <div class="col">
                                            @Html.LabelFor(model => model.item_desc, "Item Description", new { @class = "form-label" })
                                            @Html.EditorFor(model => model.item_desc, new { htmlAttributes = new { @class = "form-control text-input" } })
                                            @Html.ValidationMessageFor(model => model.item_desc, "", new { @class = "text-danger" })

                                        </div>
                                        <div class="col">

                                            @Html.LabelFor(model => model.shelf_life, "Shelf Life (in days)", new { @class = "form-label" })
                                            @Html.EditorFor(model => model.shelf_life, new { htmlAttributes = new { @class = "form-control text-input", placeholder = "0", min = "0" } })
                                            @*@Html.ValidationMessageFor(model => model.shelf_life, "", new { @class = "text-danger" })*@
                                        </div>
                                        <div class="col">
                                            <div class="form-check">
                                                @Html.LabelFor(model => model.perishable, "Origin (Perishable or Non-Perishable)", new { @class = "form-check-label" })
                                                @Html.CheckBoxFor(model => model.perishable, new { @class = "form-check-input" })
                                                @Html.ValidationMessageFor(model => model.perishable, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>


                                </div>


                                <div class="mb-3">
                                    <div class="form-group row">
                                        <div class="col">
                                            @Html.LabelFor(model => model.item_cat, "Category", new { @class = "form-label" })
                                            @Html.DropDownListFor(model => model.item_cat.Id, (SelectList)ViewBag.Categories, "Select a category", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.item_cat.Id, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col">
                                            @Html.LabelFor(model => model.item_sub_cat, "Sub Category", new { @class = "form-label" })
                                            @Html.DropDownListFor(model => model.item_sub_cat.Id, (SelectList)ViewBag.SubCategories, "Select a sub category", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.item_sub_cat.Id, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col">

                                        </div>

                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-group row">
                                        <div class="col">
                                            @Html.LabelFor(model => model.zone.Name, "Zone", new { @class = "form-label" })
                                            @Html.DropDownListFor(m => m.zone.Name, new SelectList(new[]
                                                {
                                                    new SelectListItem { Text = "All Stores", Value = "all" },
                                                    new SelectListItem { Text = "All Visayas", Value = "visayas-only" },
                                                    new SelectListItem { Text = "All Mindanao", Value = "mindanao-only" },
                                                    new SelectListItem { Text = "Reusable Store", Value = "reusable-store" }
                                                }, "Value", "Text"), "Select a zone", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.zone.Name, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col">

                                        </div>
                                        <div class="col">

                                        </div>
                                    </div>
                                </div>


                                <div class="mb-4">
                                    <h4>Unit of Measurement</h4>
                                    <hr />
                                    <div class="form-group row">
                                        <div class="mb-3">
                                            <div class="col">
                                                @Html.LabelFor(model => model.item_uom, "Unit of Measurement", new { @class = "form-label" })
                                                @Html.DropDownListFor(m => m.item_uom, new SelectList(new[]
                                                    {
                                                        new SelectListItem { Text = "Case", Value = "case" },
                                                        new SelectListItem { Text = "Inner", Value = "in" },
                                                        new SelectListItem { Text = "Piece", Value = "pc" },
                                                        new SelectListItem { Text = "Bag", Value = "bg" },
                                                        new SelectListItem { Text = "Dozen", Value = "dz" },
                                                        new SelectListItem { Text = "Gallon", Value = "gal" },
                                                        new SelectListItem { Text = "Jug", Value = "jug" },
                                                        new SelectListItem { Text = "Kilogram", Value = "kg" },
                                                        new SelectListItem { Text = "Pad", Value = "pad" },
                                                        new SelectListItem { Text = "Pack", Value = "pk" },
                                                        new SelectListItem { Text = "Sheet", Value = "sh" }

                                                    }, "Value", "Text"), "Select UOM", new { @class = "form-control" , @id="item_uom" })
                                                @Html.ValidationMessageFor(model => model.item_uom, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col">

                                            </div>
                                            <div class="col">

                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-group row">
                                                <div class="col">
                                                    @Html.LabelFor(model => model.pieces_per_inner, "Pieces per Inner", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.pieces_per_inner, new { htmlAttributes = new { @class = "form-control text-input", @id = "ïnner" } })
                                                    @Html.ValidationMessageFor(model => model.pieces_per_inner, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">
                                                    @Html.LabelFor(model => model.inner_per_case, "Inner per Case", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.inner_per_case, new { htmlAttributes = new { @class = "form-control text-input", @id = "case" } })
                                                    @Html.ValidationMessageFor(model => model.inner_per_case, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">
                                                    @Html.LabelFor(model => model.total_unit_per_case, "Total unit per Case", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.total_unit_per_case, new { htmlAttributes = new { @class = "form-control text-input", @min = 0, @id = "piece" } })
                                                    @Html.ValidationMessageFor(model => model.total_unit_per_case, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-group row">
                                                <div class="col">
                                                    @Html.LabelFor(model => model.weight, "Weight per Case", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.weight, new { htmlAttributes = new { @class = "form-control text-input", @id = "weight_per_case" } })
                                                    @Html.ValidationMessageFor(model => model.weight, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">
                                                    @Html.LabelFor(model => model.weight_uom, "Weight UOM", new { @class = "form-label" })
                                                    @Html.DropDownListFor(m => m.weight_uom, new SelectList(new[]
                                               {
                                                   new SelectListItem { Text = "Kilogram", Value = "kilogram" },
                                                   new SelectListItem { Text = "Gram", Value = "g" },
                                                   new SelectListItem { Text = "Pound", Value = "lb" },
                                                   new SelectListItem { Text = "Ounce", Value = "oz" }
                                               }, "Value", "Text"), "Select UOM", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.weight_uom, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">

                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-group row">
                                                <div class="col">
                                                    @Html.LabelFor(model => model.weight_per_inner, "Weight per Inner", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.weight_per_inner, new { htmlAttributes = new { @class = "form-control text-input", @id = "weight_per_inner" } })
                                                    @Html.ValidationMessageFor(model => model.weight_per_inner, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">
                                                    @Html.LabelFor(model => model.weight_uom_inner, "Weight UOM", new { @class = "form-label" })
                                                    @Html.DropDownListFor(m => m.weight_uom_inner, new SelectList(new[]
                                               {
                                                   new SelectListItem { Text = "Kilogram", Value = "kg" },
                                                   new SelectListItem { Text = "Gram", Value = "g" },
                                                   new SelectListItem { Text = "Pound", Value = "lb" },
                                                   new SelectListItem { Text = "Ounce", Value = "oz" }
                                               }, "Value", "Text"), "Select UOM", new { @class = "form-control" , @id="weight_uom_inner"})
                                                    @Html.ValidationMessageFor(model => model.weight_uom_inner, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">

                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-group row">
                                                <div class="col">
                                                    @Html.LabelFor(model => model.inner_pckg_uom, "Inner Packaging UOM", new { @class = "form-label" })
                                                    @Html.DropDownListFor(m => m.inner_pckg_uom, new SelectList(new[]
                                               {
                                                   new SelectListItem { Text = "Bag", Value = "bag" },
                                                   new SelectListItem { Text = "Bottle", Value = "btl" },
                                                   new SelectListItem { Text = "Box", Value = "box" },
                                                   new SelectListItem { Text = "Jug", Value = "jug" },
                                                   new SelectListItem { Text = "Pack", Value = "pack" },
                                                   new SelectListItem { Text = "Piece", Value = "pc" },
                                                   new SelectListItem { Text = "Tank", Value = "tank" },
                                                   new SelectListItem { Text = "Tray", Value = "tray" }
                                               }, "Value", "Text"), "Select UOM", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.inner_pckg_uom, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">
                                                    @Html.LabelFor(model => model.base_unit, "Base UOM", new { @class = "form-label" })
                                                    @Html.DropDownListFor(m => m.base_unit, new SelectList(new[]
                                               {
                                                   new SelectListItem { Text = "Can", Value = "can" },
                                                   new SelectListItem { Text = "Kilogram", Value = "kg" },
                                                   new SelectListItem { Text = "Pound", Value = "lb" },
                                                   new SelectListItem { Text = "Liter", Value = "lt" },
                                                   new SelectListItem { Text = "Piece", Value = "pc" },

                                               }, "Value", "Text"), "Select UOM", new { @class = "form-control" , @id="base_unit"})
                                                    @Html.ValidationMessageFor(model => model.base_unit, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">
                                                    @Html.LabelFor(model => model.case_yield, "Case Yield", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.case_yield, new { htmlAttributes = new { @class = "form-control text-input", @id = "weight_per_inner" } })
                                                    @Html.ValidationMessageFor(model => model.case_yield, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-group row">
                                                <div class="col">
                                                    @Html.LabelFor(model => model.purchase_unit, "Purchase Unit", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.purchase_unit, new { htmlAttributes = new { @class = "form-control text-input", @id = "purchase_unit" } })
                                                    @Html.ValidationMessageFor(model => model.purchase_unit, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">
                                                    @Html.LabelFor(model => model.inner_unit, "Inner Unit", new { @class = "form-label" })
                                                    @Html.EditorFor(model => model.inner_unit, new { htmlAttributes = new { @class = "form-control text-input", @id = "inner_unit" } })
                                                    @Html.ValidationMessageFor(model => model.inner_unit, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col">

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="float:right;margin-bottom:5px;">

                                    <button type="submit" class="btn btn-success">Save</button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>




            }

        </div>
        <div class="tab-pane fade" id="multiple-items" role="tabpanel" aria-labelledby="multiple-items-tab">
            @using (Html.BeginForm("InsertItems", "item", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="py-1">
                    <div class="row justify-content-center">
                        <div class="col-lg-12">
                            @Html.AntiForgeryToken()
                            <div class="form-container">
                                <h4 class="text-center mb-4">Multiple Item Records</h4>
                                <h4>Upload Excel Csv file format</h4>
                                <hr />
                                <div class="mb-3">
                                    <div class="form-group">
                                        <label class="form-label" for="file">CSV File</label>
                                        <input type="file" class="form-control-file" id="file" name="file">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-group">
                                        <div class="pull-right">
                                            <button type="submit" class="btn btn-success">Upload</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    // Get references to the input fields
    var piecesPerInnerInput = document.getElementById('ïnner');
    var innerPerCaseInput = document.getElementById('case');
    var totalUnitPerCaseInput = document.getElementById('piece');
    var weightPerCaseInput = document.getElementById('weight_per_case');
    var itemUOMInput = document.getElementById('item_uom');
    var weightUOMInput = document.getElementById('weight_uom');
    var weightPerInnerInput = document.getElementById('weight_per_inner');
    var weightUOMInnerInput = document.getElementById('weight_uom_inner');
    var innerPckgUOMInput = document.getElementById('inner_pckg_uom');
    var baseUnitInput = document.getElementById('base_unit');
    var caseYieldInput = document.getElementById('case_yield');
    var purchaseUnitInput = document.getElementById('purchase_unit');
    var innerUnitInput = document.getElementById('inner_unit');



    // Add oninput event handlers to the input fields
    piecesPerInnerInput.oninput = calculateTotalUnitPerCase;
    innerPerCaseInput.oninput = calculateTotalUnitPerCase;
    weightPerCaseInput.oninput = calculateWeightPerInner;
    itemUOMInput.oninput = ConcatPurchaseUnit;

    // Function to calculate the total unit per case
    function calculateTotalUnitPerCase() {
        var piecesPerInner = parseInt(piecesPerInnerInput.value);
        var innerPerCase = parseInt(innerPerCaseInput.value);

        if (!isNaN(piecesPerInner) && !isNaN(innerPerCase)) {
            var totalUnitPerCase = piecesPerInner * innerPerCase;
            totalUnitPerCaseInput.value = totalUnitPerCase;
           
        } else {
            totalUnitPerCaseInput.value = ''; // Reset the value if inputs are not valid
        }
    }
   
    function calculateWeightPerInner() {
        var weightPerCase = parseInt(weightPerCaseInput.value);
        var innerPerCase = parseInt(innerPerCaseInput.value);
       
        if (!isNaN(innerPerCase) && !isNaN(weightPerCase)) {
            var weightPerInner = weightPerCase / innerPerCase;         
            weightPerInnerInput.value = weightPerInner.toFixed(2);;
        } else {
            weightPerInnerInput.value = ''; // Reset the value if inputs are not valid
        }
    }

    function ConcatPurchaseUnit() { // A-DH UOM-TotalUnitperCaseBaseUnit

        if (itemUOMInput.value && totalUnitPerCaseInput.value && baseUnitInput.value) {
            var purchaseUnit = itemUOMInput.value + '-' + totalUnitPerCaseInput.value + baseUnitInput.value;
            purchaseUnitInput.value = purchaseUnit.toUpperCase();
        } else {
            purchaseUnitInput.value = ''; // Reset the value if inputs are not valid
        }
    }
    function ConcatInnerUnit() { // G-B/FH InnerPackingUOM-PcsPerInner/WeightPerinnerBaseUnit

      
    }
</script>